package com.o2.util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.log4j.Logger;
import org.apache.xpath.CachedXPathAPI;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

public class WSDLEditor 
{
    private static Logger log = Logger.getLogger(WSDLEditor.class); 

    private Document doc;

    protected javax.xml.parsers.DocumentBuilder documentBuilder;
    protected DocumentBuilderFactory documentBuilderFactory;
    protected CachedXPathAPI xpathAPI;
    protected Transformer serializer;
    protected File existingWsdlFile;     
    
    public WSDLEditor(File existingWsdlFile) throws WsdlEditorException
    {
        this.existingWsdlFile = existingWsdlFile;
        
        try
        {
            documentBuilderFactory = DocumentBuilderFactory.newInstance();
            documentBuilderFactory.setNamespaceAware(true);
            documentBuilder = documentBuilderFactory.newDocumentBuilder();

            xpathAPI = new CachedXPathAPI();
            serializer = TransformerFactory.newInstance().newTransformer();

            doc = documentBuilder.parse(existingWsdlFile);
        }
        catch (Exception e)
        {
            throw new WsdlEditorException(e);
        }
    }
    
    public void editSocketPort(String service, String portName, String host, String portNumber) throws WsdlEditorException
    {
        Node hostNode = null;
        Node portNode = null; 

        String hostXpathQuery = "/wsdl:definitions/wsdl:service[@name=\"" + service + "\"]/wsdl:port[@name=\"" + portName
        + "\"]/socket:address/@host";
        String portXpathQuery = "/wsdl:definitions/wsdl:service[@name=\"" + service + "\"]/wsdl:port[@name=\"" + portName
        + "\"]/socket:address/@port";   

        try
        {
            hostNode = xpathAPI.selectSingleNode(doc, hostXpathQuery);
            portNode = xpathAPI.selectSingleNode(doc, portXpathQuery);
        }
        catch (DOMException e)
        {
            throw new WsdlEditorException(e); 
        }
        catch (TransformerException e)
        {
            throw new WsdlEditorException(e); 
        }
        
        if ( (hostNode == null) || (portNode == null))
        {
            throw new WsdlEditorException("Unable to locate the address node in the WSDL.");
        }
        else
        {
            hostNode.setNodeValue(host); 
            portNode.setNodeValue(portNumber);                 
        }        
    }
    
    
    public void editCORBAPort(String service, String port, String corbaLocation) throws WsdlEditorException
    {
        Node addressNode = null;
        String xpathQuery = "/wsdl:definitions/wsdl:service[@name=\"" + service+ "\"]/wsdl:port[@name=\"" + port
        + "\"]/corba:address/@location";

        try
        {
            addressNode = xpathAPI.selectSingleNode(doc, xpathQuery);
        }
        catch (DOMException e)
        {
            throw new WsdlEditorException(e); 
        }
        catch (TransformerException e)
        {
            throw new WsdlEditorException(e); 
        }

        if (addressNode == null)
        {
            log.error("Unable to locate the address node in the WSDL.");
            throw new WsdlEditorException("Unable to locate the address node in the WSDL.");
        }
        else
        {
            addressNode.setNodeValue(corbaLocation);
        }    
    }
    
    public void editSoapPort(String service, String port, String soapAddress) throws WsdlEditorException
    {
        Node addressNode = null;
        String xpathQuery = "/wsdl:definitions/wsdl:service[@name=\"" + service+ "\"]/wsdl:port[@name=\"" + port
        + "\"]/soap:address/@location";

        try
        {
            addressNode = xpathAPI.selectSingleNode(doc, xpathQuery);
        }
        catch (DOMException e)
        {
            throw new WsdlEditorException(e); 
        }
        catch (TransformerException e)
        {
            throw new WsdlEditorException(e); 
        }

        if (addressNode == null)
        {
            log.error("Unable to locate the address node in the WSDL.");
            throw new WsdlEditorException("Unable to locate the address node in the WSDL.");
        }
        else
        {
            addressNode.setNodeValue(soapAddress);
        }
     }
    
    public File getWsdlFile() throws WsdlEditorException {
        File tempFile = createTempFile(doc, existingWsdlFile.getName());
        log.debug("Created temporary wsdl file: " + tempFile.getAbsolutePath());
        return tempFile;
    }

    private File createTempFile(Document doc, String tempFilePrefix) throws WsdlEditorException
    {
        File tempFile = null;
        try
        {
            tempFile = File.createTempFile(tempFilePrefix, ".tmp.wsdl");

            tempFile.deleteOnExit();

            FileOutputStream fos = new FileOutputStream(tempFile);
            serializer.transform(new DOMSource(doc), new StreamResult(new OutputStreamWriter(fos)));
            fos.close();
        }
        catch (Exception e)
        {
            log.error("Error creating temporary file to hold editted WSDL; details: " + e.getMessage());
            throw new WsdlEditorException(e); 
        }

        return tempFile;

    }
}
