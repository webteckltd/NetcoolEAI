
package com.o2.manonsite.mrs;

import java.io.IOException;
import java.rmi.RemoteException; 
import java.sql.SQLException;
import java.util.HashMap;
import org.apache.log4j.Logger;
import com.o2.common.CommunicateWithTT;
import com.o2.common.Constants;
//import com.o2.manonsite.WorkItem;
import com.o2.manonsite.WorkQueue;
import com.o2.manonsite.inms.INMSConnection; 
import com.o2.manonsite.mrs.wsdl.MRSService;
import com.o2.manonsite.mrs.wsdl.Map;
import com.o2.manonsite.SocketProbe.wsdl.Event;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class MRSServiceImpl implements MRSService
{

	private static Logger log = Logger.getLogger(MRSServiceImpl.class);
    private WorkQueue workQueue;
    private WorkQueue workQueueCIC;
    private CommunicateWithTT ttServer;
   
    public MRSServiceImpl(WorkQueue workQueue,CommunicateWithTT ttServer,WorkQueue workQueueCIC)
    {
        this.workQueue = workQueue;
        this.ttServer = ttServer;
        this.workQueueCIC = workQueueCIC;
    }

    public void demoGetContent()
    {
    	try {
    		//Map request = MRSMessageHelper.createRequest("62946","O2","07834571893","dev 5555 heartbeat");
    		Map request = MRSMessageHelper.createRequest("62946","O2","07834571893","");
    		Map mm = getContent(request);
    	}
    	catch(RemoteException ex)
		{
    	    log.fatal("Exception caught " ,ex);
 		    System.exit(1);
		}
    }
    
    /**
	 * @param inStr
	 * @param maxSize
	 * @return String
	 * Pad cellsiteid with leading Zeros if less than 6 digits  
	 */
	public String padStr(String inStr, int maxSize)
	{	
		if(inStr == null || inStr.length() == 0)
			 return inStr;
		String outStr = new String(inStr);
		char chr = inStr.toUpperCase().charAt(inStr.length() - 1);	
		if(Character.isLetter(chr))
			inStr =inStr.substring(0,(inStr.length() - 1)); 
		
		StringBuffer cid = new StringBuffer(inStr);
		try
		{			
			Integer.parseInt(inStr);
			if(cid.length() < maxSize)
			{
				int pp=0;
				//need to pad the cellsiteId to 6 digits
				pp = maxSize - cid.length();
				char cc[] = new char[pp];
				for(int i=0; i < pp; i++)
				{
					cc[i] = '0';
				}
				log.info("padding  + '" + inStr + "' by " + pp + " Zeros" );
				cid.insert(0,cc);
				//log.info("CellSite() is now  " + cid );
			}
			else if(cid.length() > maxSize)
			{
				log.info("[before]cellsiteid " +  inStr + " is more than 6 digits");
				log.info("Removing digits if padded with too many");
				while(cid.length() >  6 )
				{      			  
					cid.deleteCharAt(0);
				}
				log.info("[after]cellsiteid " +  inStr + " is now 6 digits");
			}
			if(Character.isLetter(chr) /*&& (chr == 'B' || chr == 'G')*/) //Add the letter back
				cid.append(chr);
		}
		catch (NumberFormatException ex)
		{
			//DO nothing assuming that this is a SSR
			cid = new StringBuffer(outStr.toUpperCase());
		} 
		return cid.toString();
	}
	
    /*
     *   $msisdn           = $LINE01
   $Network          = $LINE02
   $Shortcode        = $LINE03
   $RawMessage       = $LINE04
   $ParsedCommand    = upper($LINE05)
   $SiteRef          = upper($LINE06)
   if (exists($LINE07)) { $BCFindex = $LINE07 }
   if (exists($LINE08)) { $TRXindex = $LINE08 }

   $FirstName        = $LINE10
   $LastName         = $LINE11
   $Company          = $LINE12
   $email            = $LINE13
   $Sitename         = $LINE14
   $PrivLevel        = $LINE15
   $CommandStatus    = upper($LINE16)  #"OK", "FAILED", "BLOCKED", "LIMITEXCEEDED"
     */
    public Map getContent(Map request) throws RemoteException
    {
        log.info("Received call for getContent.");
        String incomingTextMessage = MRSMessageHelper.lookup(request, "msg"); 
        String replyTextMessage = null;
        Event event =null;
        boolean found = false;
        HashMap rOutput=null;
        boolean cont=true;
        try {
        	
        	long startTime = System.currentTimeMillis();
        	        	
        	String msisdn = MRSMessageHelper.lookup(request, "MSISDN");
    		log.debug("MSISDN 	:" + msisdn );
    		String scode = MRSMessageHelper.lookup(request, "SHORTCODE");
    		log.debug("SHORTCODE 	:" + scode);
    		String nwork = MRSMessageHelper.lookup(request, "NETWORK");
    		log.debug("NETWORK 	:" + nwork);    		
        	log.debug("incomingTextMessage : " + incomingTextMessage);
        	event = new Event();
           	event.setLINE01(msisdn);
        	event.setLINE02(nwork);
        	event.setLINE03(scode);
        	event.setLINE04(incomingTextMessage);
        	
        	//Parse Incoming message
        	MRSRequestInfo requestInfo = new MRSRequestInfo(incomingTextMessage);        	
        	String cmmd = requestInfo.getCommand().toLowerCase();
        	StringTokenizer stk = new StringTokenizer(requestInfo.getCommand().toLowerCase());
        	//log.debug("NumOfToken = " + stk.countTokens());
        	if(stk.countTokens() > 1)
        	      	cmmd =stk.nextToken();
        	event.setLINE05(cmmd);   		
        	
            
        	if(incomingTextMessage.toLowerCase().matches(".* WINO2MANST .*" ))
    		{
    			log.debug("Recieved a WINTEL Test message");
    			replyTextMessage="Recieved a WINTEL Message to test connection so no action will be taken";
    		}
        	else if(cmmd.toLowerCase().equals("heartbeat"))
    		{
    			log.debug("Recieved an heartbeat");
    		}
    		else
    		{   
    			//Authenticate User Here  
    			rOutput = ttServer.AuthenticateUser(new String(msisdn));    			
    			if(rOutput == null || new Integer((String)rOutput.get("ERRORMSG")).intValue() != 0)
    			{
    				rOutput = ttServer.AuthenticateUser("+" + new String(msisdn));
    			}
    			 
    			if(rOutput != null && new Integer((String)rOutput.get("ERRORMSG")).intValue() == 0)
    				found=true;
    			else
    				log.debug("[" + msisdn + "] Authentication failed ");
    	    	event.setLINE17(new Boolean(found).toString());
    	    	
    			long currentTime = System.currentTimeMillis(); 
    			SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
    	    	dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
    	    	long elapsed = currentTime - startTime;

    	    	log.debug("[" + msisdn + "] Authenticating took " + dateFormat.format(new Date(elapsed)));    	    	 
    	    	String siteName = null; 
				try
				{
					String smsBodies[] = null;
					
					//Get Cell Site Name from INMS WEB SERVER
					//Invoke directly on INMS web server using pure HTTPS
					INMSConnection inmsConnection = new INMSConnection();
					char c = requestInfo.getCellSiteId().charAt(requestInfo.getCellSiteId().length() - 1);
					if(Character.isLetter(c) && 
							MRSRequestThread.isParsableToInt(requestInfo.getCellSiteId().substring(0,requestInfo.getCellSiteId().length() - 1)))
					{						 
						if((cmmd.startsWith("ala") || cmmd.startsWith("his")) && (Character.toUpperCase(c) == 'B'|| Character.toUpperCase(c) == 'G'))
						{
							log.debug(" This is the expecter haviour; continue processing");
						}
						else
						{   
							log.warn("No Infomation will be retrieved from INMSWEB"); 							 
							siteName = requestInfo.getCellSiteId();
							event.setLINE16(Constants.CMDSTATUS[4]);
							cont=false;
						}						
					}					
					if(cont == true)
					{
						smsBodies = inmsConnection.getRequest("info",requestInfo.getCellSiteId());
						
						if (log.isInfoEnabled()) log.info("CellSiteInfo called successfully for cellSiteId '" + requestInfo.getCellSiteId() + "'");
						
						if(smsBodies == null)
						{
							log.warn("No Infomation was retrieved from INMSWEB");
							smsBodies = new String [1]; 
							smsBodies[0] = requestInfo.getCellSiteId();
						}  
						if(smsBodies.length > 0)
							siteName = smsBodies[0].substring(smsBodies[0].indexOf("\t") + 1, smsBodies[0].length());
						log.debug("siteName = " + siteName); 
						if ((smsBodies.length == 0) || (smsBodies.length == 1 && siteName.startsWith("Sorry")))
						{
							if (log.isDebugEnabled())
							{
								if(smsBodies.length == 0)
									log.debug(">> No  cellSite name for  " + requestInfo.getCellSiteId());
								else
									log.warn(smsBodies[0]);
							}							
							siteName = requestInfo.getCellSiteId();
						}						 
					}
				}catch (StringIndexOutOfBoundsException e0)
				{ 
					siteName=requestInfo.getCellSiteId();
					event.setLINE18("MRSServiceImpl.class");
					event.setLINE19(e0.getMessage());							
				} 
				catch(IOException io)
				{ 
					siteName=INMSConnection.INMSFAILED;
					event.setLINE18(INMSConnection.INMSFAILED);
					event.setLINE19("Cannot authenticate cellSiteID, INMSWEB interface probably Down");							
				}   	
				String padCellSite = padStr(requestInfo.getCellSiteId(),6);
				event.setLINE01(msisdn);
				event.setLINE02(nwork);
				event.setLINE03(scode);
				event.setLINE04(incomingTextMessage);    			
				event.setLINE06(padCellSite);
				
				if(siteName.startsWith(":"))
					siteName = siteName.substring(1);
				if(siteName.startsWith("sitename:"))
					siteName = siteName.substring("sitename:".length());
				event.setLINE14(siteName);
				if(rOutput == null)
				{
					event.setLINE18(CommunicateWithTT.JDBCFAILED);
					event.setLINE19("Cannot authenticate userID, Amdocs probably Down");    					 
					rOutput = new HashMap(5);
				}
				if(rOutput.get("FIRSTNAME") == null || rOutput.get("LASTNAME") == null || rOutput.get("COMPANY") == null)
					log.warn("Although an attempt was made to authenticate , some/all of this user's infomation was not present");
								 	 
				event.setLINE10(rOutput.get("FIRSTNAME") == null ? "":(String)rOutput.get("FIRSTNAME"));
				event.setLINE11(rOutput.get("LASTNAME") == null ? "": (String)rOutput.get("LASTNAME"));
				event.setLINE12(rOutput.get("COMPANY") == null ? "" :(String)rOutput.get("COMPANY"));
				event.setLINE13(rOutput.get("EMAILADDRESS") == null? "":(String)rOutput.get("EMAILADDRESS"));
    			if(cont == false)
    			{    				  				
    				log.debug("Only 'ALARM' and 'HISTORY' requests can have a postfix of either 'B' or 'G'");
    				//replyTextMessage = "Only 'ALARM' and 'HISTORY' requests can have a postfix of either 'B' or 'G'";
    				replyTextMessage = "Your message appears corrupt.  Please phone the O2 - NMC for guidance";
    				event.setLINE16(Constants.CMDSTATUS[4]);
    			}
    			else if(!found && !cmmd.startsWith("cal") && !cmmd.startsWith("in") && !cmmd.startsWith("out") && !cmmd.startsWith("txt") && !cmmd.startsWith("text")) {
    				log.warn("[" + msisdn + "]Cannot authenticate " + requestInfo.getCellSiteId() + " Request terminated"); 
    				replyTextMessage = "This phone is not allowed to do this command.  If you register with the NMC, O2 may allow you to do more functions.";
    				//replyTextMessage = "Warning you are not a known field engineer. Contact the O2 NOC on 01234 67 8899 immediately";    		    	 
    			}
    			else  
    			{    				
    				String smsg="";
    				String emsg=" "+ padCellSite ;
    				if((cmmd.startsWith("out") || cmmd.startsWith("in") || cmmd.startsWith("cal") || cmmd.startsWith("txt") || cmmd.startsWith("text") ) && !found)
    				{
    					if(cmmd.startsWith("out"))
    					{ smsg = "You have just txt out of ";}
    					else if (cmmd.startsWith("in"))
    					{smsg = "Your presence is txt-in @ " ;emsg +=". If you register with the NMC, you can do more functions."  ;}
    					else if (cmmd.startsWith("cal"))
    					{smsg = "";}
    					else if (cmmd.startsWith("txt")||cmmd.startsWith("text") )
    					{smsg ="";} 
    				}
    				else
    				{    					
    					smsg = "Hello " + (String)rOutput.get("FIRSTNAME") + " " + (String)rOutput.get("LASTNAME") + " of " + (String)rOutput.get("COMPANY") + " ";
    					
    					if(cmmd.startsWith("in"))
    						{ smsg += " We have you @ ";}
    					if(cmmd.startsWith("out"))
    					{ smsg = "You have just txt out of ";} 
    					if(!requestInfo.getCellSiteId().equals(siteName))
    						{ emsg += " - " + siteName ;}
    				}
    				emsg += ". Thx 4 using Maxim.";
	            
    				if (cmmd.startsWith("ala")) 
    				{
    					cmmd = "alarm";
    					replyTextMessage = smsg + ". Processing your request for alarms for "  + emsg; 
    				}
    				else if (cmmd.startsWith("aud")) 
    				{
    					cmmd = "audit";
         	       		replyTextMessage = smsg +". Processing your request for audit for " + emsg; 
    				}
    				else if (cmmd.startsWith("cle") || cmmd.startsWith("clr")) 
    				{
    					cmmd = "clear";
         	       		replyTextMessage = smsg +". Processing your request for clear for " + emsg; 
    				}
    				else if (cmmd.startsWith("dir") || cmmd.startsWith("loc") || cmmd.startsWith("access")) 
    				{ 
    					cmmd = "direct";
    					replyTextMessage = smsg +". Processing your request for directions for " + emsg; 
    				}
    				else if (cmmd.startsWith("safe")) 
    				{ 
    					cmmd = "safe";
    					replyTextMessage = smsg +". Processing your request for safety information for " + emsg; 
    				}
    				else if (cmmd.startsWith("note")) 
    				{ 
    					cmmd = "note";
    					replyTextMessage = smsg +". Processing your request for site notes for " + emsg; 
    				}
    				else if (cmmd.startsWith("cop")) 
    				{ 
    					int cpySub=1; 
    					Pattern	cpMap = Pattern.compile("copy?? *([0-9]+)");
    					Matcher m = cpMap.matcher(requestInfo.getCommand().toLowerCase()); 
    					if(m.find())
    					{ 
    						try
							{
    							cpySub = Integer.parseInt(m.group(1));  
							}
    						catch(NumberFormatException ne)
							{
    							log.error("Copy value not recongnised;setting to default ",ne);
    							cpySub=1;
							}
    						log.debug("copy Subcrition no :" + cpySub );
    					}
    					String cpStateVal=" disable ";
    					if(cpySub > 0)
    						cpStateVal = " enable ";
    					cmmd ="copy";            		 	
    					replyTextMessage = smsg +". Processing your request to " + cpStateVal + "alarm diverts for " + emsg; 
    				}
    				else if (cmmd.startsWith("in")) 
    				{ 
    					cmmd ="in";
    					replyTextMessage = smsg + emsg; 
    				}
    				else if (cmmd.startsWith("out")) 
    				{ 
    					cmmd = "out";
    					replyTextMessage = smsg + emsg ; 
    				}
    				else if (cmmd.startsWith("cal")) 
    				{ 
    					cmmd = "callme"; 
    					replyTextMessage = smsg +". We are processing a CALLME request for you @ " + emsg;
    				}
    				else if (cmmd.startsWith("txt") || cmmd.startsWith("text") ) 
    				{ 
    					cmmd = "textin";
    					replyTextMessage = smsg +". Processing your request 'TextIn' for " + emsg; 
    				}
    				else if(cmmd.startsWith("his"))
    				{
    					cmmd = "history";
    					replyTextMessage = smsg +". Processing your request 'History' for " + emsg;    					
    				}    				
    				else if(cmmd.equalsIgnoreCase("hopon") || cmmd.startsWith("hopof") || cmmd.startsWith("unl"))
    				{
//    					Retrieve Usage Quota
    					HashMap tmpMap = null;
    					int dlimit=0;
    					int cday =0;
    					com.o2.manonsite.sybase.SybaseImpl sysImpl = new com.o2.manonsite.sybase.SybaseImpl();
    					try {
    						tmpMap = sysImpl.queryDB(event.getLINE01());
    						if(tmpMap == null)
    						{
    							log.warn(" No Privledge record found for MSISDN " + event.getLINE01());
    							event.setLINE15("0"); 						
    						}						 
    						else
    						{
    							event.setLINE15((String)tmpMap.get("SecurityLevel"));
    							if(event.getLINE05().equals("unlock"))
    							{
    								dlimit = Integer.parseInt((String)tmpMap.get("UnlockDailyLimit"));
    								cday =Integer.parseInt((String)tmpMap.get("UnlockCountDay"));							
    							}
    							else if(event.getLINE05().startsWith("hopo"))
    							{
    								dlimit = Integer.parseInt((String)tmpMap.get("HoppingDailyLimit"));
    								cday = Integer.parseInt((String)tmpMap.get("HoppingCountDay"));
    							}    							
    						}
    					} catch (SQLException e) {
    						// TODO Auto-generated catch block
    						log.warn(" Could not retrieve user priviledges for MSISDN " + event.getLINE01() + " at this time",e);
    						event.setLINE15("0");
    						e.printStackTrace(); 
    					} 
    					event.setLINE07(padStr(requestInfo.getBCF(),4));
    					event.setLINE08(padStr(requestInfo.getTRX(),4));
    					cmmd=cmmd.trim().toLowerCase();
    					if(cmmd.startsWith("unl"))
    						cmmd="unlock"; 
    					else if(cmmd.startsWith("hopof"))
    						cmmd="hopoff";    					
    					if(Integer.parseInt(event.getLINE15()) < Constants.SECLEVEL_SECOND)
    					{    						 
    						replyTextMessage =smsg + "You are not authorised to issue this command. Contact the O2 NMC for this capability on 01753281000." /*+ emsg*/;
    						event.setLINE16(Constants.CMDSTATUS[2]);
    					}
    					else if((event.getLINE07() == null || event.getLINE07().equals("")) || (event.getLINE08() == null || event.getLINE08().equals("")))
    					{
    						replyTextMessage=smsg +". Your message appears corrupt.  Please phone the O2 - NMC for guidance " + emsg;
    						event.setLINE16(Constants.CMDSTATUS[1]);
    					}
    					else if(cday >= dlimit)
						{							 
    						replyTextMessage=  smsg +". Your personal daily limit has been reached for this command. Contact the O2 NMC on 01753281000." /*+ emsg*/;
							event.setLINE16(Constants.CMDSTATUS[3]);
						}
    					else
    					{
    						sysImpl.updateDB(event.getLINE01(),cday,event.getLINE05());
    						event.setLINE16(Constants.CMDSTATUS[0]);
    						replyTextMessage = smsg +". Processing your request for " + cmmd + " on " + padCellSite + "-" + siteName + ", an AUDIT will be sent to confirm any changes";
    					}
    				}
    				else 
    				{    
    					event.setLINE16(Constants.CMDSTATUS[4]);    					
    					replyTextMessage = "Your message appears corrupt.  Please phone the O2 - NMC for guidance";
    				}
    				event.setLINE05(cmmd);//overwrite command and it would have be modified for some commands
				 				
    				if (log.isInfoEnabled()) log.info("Creating work item for cellSite " + siteName);	
    			}
	     	} 
        }
 		catch (MRSRequestInfoException ex) {
 		   replyTextMessage="Incoming text messsage was formatted incorrectly.";
 		   log.warn(replyTextMessage,ex);  
 		  if(event != null)
		    {
		       event.setLINE18("MRSRequestInfoException");
		       event.setLINE19("Exception while trying to process request");
		    }
 		}
 		catch (Exception ex) {
 		    replyTextMessage = "Exception while trying to process request!"; 
 		    log.error(replyTextMessage,ex);
 		    if(event != null)
 		    {
 		       event.setLINE18("MRSServiceImpl.class");
		       event.setLINE19("Exception while trying to process request");
 		    }
 		}
 		catch (java.lang.Error e) {
 		    replyTextMessage = "Exception while trying to process request!"; 
 		    log.fatal(replyTextMessage,e);
 		   	System.exit(1); 		    
 		}
 		finally
		{
 			if(event.getLINE17() == null)
 				event.setLINE17(new Boolean(false).toString());	
 			/*event.setLINE09(new Boolean(cont).toString());*/
 			workQueue.enqueueWork(event);
		} 		
        if (log.isInfoEnabled()) log.info("Sending response '" + replyTextMessage + "'");        
 		return MRSMessageHelper.createResponse(MRSMessageHelper.NORMAL_SMS_MESSAGE,
                MRSMessageHelper.MTCODE, replyTextMessage);
 		
    }        
}
