package com.o2.manonsite.mrs;

import org.apache.log4j.Logger;

import com.o2.manonsite.Terminatable;
import com.o2.manonsite.WorkItem;
import com.o2.manonsite.broker.BrokerException;
import com.o2.manonsite.broker.O2XMLRPCBrokerConnection;
import com.o2.manonsite.inms.INMSConnection;
import com.o2.common.CommunicateWithTT;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import java.util.Date;
import java.sql.SQLException;
import java.util.HashMap;

public class MRSRequestThread extends Thread implements Terminatable
{
	private static Logger log = Logger.getLogger(MRSRequestThread.class);

	private O2XMLRPCBrokerConnection brokerConnection;	
	private boolean terminate = false;
	private MRSRequestThreadPool parent = null;
	

	public static final String expectedAlarmHeader = "alarms";
	
	public MRSRequestThread(
		MRSRequestThreadPool parent,
		String name,
		O2XMLRPCBrokerConnection brokerConnection)
	{
		super(parent, name);
		this.parent = parent;
		this.brokerConnection = brokerConnection;		
	}
	public void terminate (){
		terminate = true;
	}
	public static String padStr(String inStr, int maxSize)
	{
		StringBuffer cid = new StringBuffer(inStr);
		try
        {
            Integer.parseInt(inStr);
        	if(cid.length() < maxSize)
    		{
    			int pp=0;
     			//need to pad the cellsiteId to 6 digits
    			pp = maxSize - cid.length();
    			char cc[] = new char[pp];
    			for(int i=0; i < pp; i++)
    			{
    				cc[i] = '0';
    			}
    			log.info("padding  + '" + inStr + "' by " + pp + " Zeros" );
    			cid.insert(0,cc);
    			//log.info("CellSite() is now  " + cid );
    		}
        	else if(cid.length() > maxSize)
        	{
        		log.info("cellsiteid" +  inStr + " is more than 6 digits");
        		log.info("Removing Zeros if padded with too many");
        		while(cid.length() >  6 )
        		{
        			if( cid.charAt(0) == '0')
        				cid.deleteCharAt(0);
        		}
        	}
        }
        catch (NumberFormatException ex)
        {
           //DO nothing assuming that this is a SSR
        	cid = new StringBuffer(inStr.toUpperCase());
        }
		return cid.toString();
	}
	
	private void SplitMsg(String msidn,String msg) throws BrokerException
	{
		if(msg.length() > 160)
    	{
    		int ff = Math.round(msg.length()/160);
		   	if (log.isDebugEnabled()) log.debug(">> Calling SplitMsg");
        	String messages[] = new String [ff+1]; 
        	StringBuffer buf = new StringBuffer(msg);
        	int j=0;
        	int start=0;
        	int end=159;
        	while(buf.length() > 0)
        	{
        		try
				{
        			messages[j] = buf.substring(start,end);
			
        			if (log.isDebugEnabled()) log.debug("Sending message[" + j + "] : " + messages[j]);
        				brokerConnection.sendSimpleSMS(msidn, messages[j]);
        		
        			buf = new StringBuffer(buf.substring(end));
        			if(end > buf.length())
        				end=buf.length();
        			j++;
        			Thread.sleep(2000); //To prevent sms msg from been out of order
				}
        		catch(InterruptedException ie)
				{
        			throw new BrokerException(ie.getMessage());
				}
        		//if (log.isDebugEnabled()) log.debug("buf :" + buf);
        		//if (log.isDebugEnabled()) log.debug("end :" + end);
        		
        	}
    	}
    	else
    		brokerConnection.sendSimpleSMS(msidn, msg);
	}
	public void run()
	{
			SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
			dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
			long elapsed;
			
			while (!terminate){
			// Get the MessageRequest from the work queue.
			log.debug("Waiting for work.... ");	
			WorkItem workItem = null; 
			try {
				workItem= (WorkItem) parent.getWorkQueue().dequeueWork();
			    
			    long startTime = System.currentTimeMillis();
			    log.info("Recieved Request at '" +  dateFormat.format(new Date(startTime)) + "'");

				if (workItem.getCommand().toLowerCase().startsWith("alarm")) 
				{
					// Invoke directly on INMS web server using pure HTTPS
					INMSConnection inmsConnection = new INMSConnection();
					
					if (log.isInfoEnabled()) log.info("Getting alarm info for cellSiteId '" + workItem.getCellSite() + "'");
					String smsBodies[] = inmsConnection.getCellSiteAlarms(workItem.getCellSite());
					
					if (log.isInfoEnabled()) log.info("getCellSiteAlarms called successfully for cellSiteId '" + workItem.getCellSite() + "'");
				
					if (smsBodies.length == 0)
					{
					    if (log.isDebugEnabled()) log.debug(">> No SMS alarms for cellSite " + workItem.getCellSite());
					    smsBodies = new String[1];
					     
					    smsBodies[0] = "There are no current alarms on " + workItem.getCellSite() + " @ this instant"; 
					}
					else
					{
						if (log.isDebugEnabled()) log.debug(">> Sending " + smsBodies.length + " messages for cellSite " + workItem.getCellSite());
						
						for (int i = 0; i < smsBodies.length; i++) {
							if (log.isDebugEnabled()) log.debug("Sending message[" + i + "]: '" + smsBodies[i] +"'"); 
							try
							{
								if(!workItem.getNetwork().equals("VOD"))
						    		brokerConnection.sendSimpleSMS(workItem.getMsisdn(), smsBodies[i],"CON");
								else 
									SplitMsg(workItem.getMsisdn(),smsBodies[i]);;
								
	                        }
							catch (BrokerException e)
							{
								log.error("Unable to send SMS; details:" ,e);
							} 
						}
					}			    
				}
				else if (workItem.getCommand().toLowerCase().startsWith("audit")) 
				{
					// Invoke directly on INMS web server using pure HTTPS
					INMSConnection inmsConnection = new INMSConnection();
					
					if (log.isInfoEnabled()) log.info("Getting audit info for cellSiteId '" + workItem.getCellSite() + "'");
					String smsBodies[] = inmsConnection.getRequest("audit",workItem.getCellSite());
					
					if (log.isInfoEnabled()) log.info("getCellSiteAudit called successfully for cellSiteId '" + workItem.getCellSite() + "'");
				
					if (smsBodies.length == 0)
					{
					    if (log.isDebugEnabled()) log.debug(">> No SMS audit for cellSite " + workItem.getCellSite());
					    smsBodies = new String[1];
					    smsBodies[0] = "No SMS audit for cellSite " + workItem.getCellSite();
					}
					else
					{
						if (log.isDebugEnabled()) log.debug(">> Sending " + smsBodies.length + " messages for cellSite " + workItem.getCellSite());
					}	
					for (int i = 0; i < smsBodies.length; i++) 
					{
					    if (log.isDebugEnabled()) log.debug("Sending message[" + i + "]: '" + smsBodies[i] +"'"); 
					    try
	                    {
						    	if(!workItem.getNetwork().equals("VOD"))
						    		brokerConnection.sendSimpleSMS(workItem.getMsisdn(), "CSR " + workItem.getCellSite() + " : " + smsBodies[i],"CON");
							    else 
							    	SplitMsg(workItem.getMsisdn(),"CSR " + workItem.getCellSite() + " : " + smsBodies[i]);
	                    }
	                    catch (BrokerException e)
	                    {
	                    	log.error("Unable to send SMS; details:" + e.getMessage());
	                    } 
					}
								    
				}
				else if (workItem.getCommand().toLowerCase().startsWith("direct"))
				{
					// Get Site Location
					String  cid ;
					cid = padStr(workItem.getCellSite() , 6);
					HashMap rOutput = CommunicateWithTT.CallMOSLocation(cid);
					
					if (log.isInfoEnabled()) log.info("Getting directions for cellSiteId '" + workItem.getCellSite() + "'");
										 
					String smsBodies[] = new String[1];
					smsBodies[0] = (String)rOutput.get("DIRECTIONS");
					if (log.isInfoEnabled()) log.info("getCellSiteLocation  called successfully for cellSiteId '" + workItem.getCellSite() + "'");
				
					if (Integer.parseInt((String)rOutput.get("ERRORMSG")) < 0 || smsBodies[0]== null)
					{
					    if (log.isDebugEnabled()) log.debug(">> No directions available for cellSite " + workItem.getCellSite());
					    smsBodies = new String[1];
					    smsBodies[0] = "No directions available for cellSite " + workItem.getCellSite();
					}
					else
					{
						if (log.isDebugEnabled()) log.debug(">> Sending " + smsBodies.length + " messages for cellSite " + workItem.getCellSite());
					}	
					for (int i = 0; i < smsBodies.length; i++) 
					{
						    if (log.isDebugEnabled()) log.debug("Sending message[" + i + "]: '" + smsBodies[i] +"'"); 
						    try
	                        {
						    	if(!workItem.getNetwork().equals("VOD"))
						    		brokerConnection.sendSimpleSMS(workItem.getMsisdn(), smsBodies[i],"CON");
							    else 
							    {
							    	//MPN did not work either for the VODA Phone problem
									//if(smsBodies[i].length() > 100)
									//{
									//	brokerConnection.sendSimpleSMS(workItem.getMsisdn(), smsBodies[i],"MPN");
									//}
									//else
							    	SplitMsg(workItem.getMsisdn(),smsBodies[i]);
								}
	                        }
	                        catch (BrokerException e)
	                        {
	                            log.error("Unable to send SMS; details:" + e.getMessage());
	                        } 
					}
								    
				}	
				else if (workItem.getCommand().toLowerCase().startsWith("safe") || workItem.getCommand().toLowerCase().equals("in")) 
				{
					if (workItem.getCommand().toLowerCase().equals("in")) 
					{
						if (log.isInfoEnabled()) log.info("Engineer txting IN for cellSiteId '" + workItem.getCellSite() + "' Sending safety notes (if any) to Engineer");
					}
					//Get Safety
					String cid = padStr(workItem.getCellSite() , 6);
					
					HashMap rOutput = CommunicateWithTT.CallMOSLocation(cid);
					
					if (log.isInfoEnabled()) log.info("Getting safety info for cellSiteId '" + workItem.getCellSite() + "'");
					String smsBodies[] = new String[1];
					smsBodies[0] = (String)rOutput.get("SAFETY");
					
					if (log.isInfoEnabled()) log.info("getCellSiteSafetyNote  called successfully for cellSiteId '" + workItem.getCellSite() + "'");
				
					if (Integer.parseInt((String)rOutput.get("ERRORMSG")) < 0 || smsBodies[0]== null )
					{
					    if (log.isDebugEnabled()) log.debug(">> No safety notes available for cellSite " + workItem.getCellSite());
					    if(workItem.getCommand().toLowerCase().startsWith("safe")) //Don't send no cellsite Msg
					    {
					    	smsBodies = new String[1];
					    	smsBodies[0] = "No safety notes available for cellSite " + workItem.getCellSite();
					    }
					}
					else
					{
						if (log.isDebugEnabled()) log.debug(">> Sending " + smsBodies.length + " messages for cellSite " + workItem.getCellSite());
					}	
					for (int i = 0; i < smsBodies.length && smsBodies[i] != null; i++) 
					{
						    if (log.isDebugEnabled()) log.debug("Sending message[" + i + "]: '" + smsBodies[i] +"'"); 
						    try
	                        {
						    	if(!workItem.getNetwork().equals("VOD"))
						    		brokerConnection.sendSimpleSMS(workItem.getMsisdn(), "SAFETY INFO: " + smsBodies[i],"CON");
							    else 
							       	SplitMsg(workItem.getMsisdn(),"SAFETY INFO: " + smsBodies[i]);
							}
	                        catch (BrokerException e)
	                        {
	                            log.error("Unable to send SMS; details:" + e.getMessage());
	                        } 
					}			    
				}	
				else if (workItem.getCommand().toLowerCase().startsWith("note")) 
				{
					//Get Site Note
 					String  cid  ;
					cid = padStr(workItem.getCellSite() , 6);
					HashMap rOutput = CommunicateWithTT.CallMOSLocation(cid);
					
					if (log.isInfoEnabled()) log.info("Getting site notes for cellSiteId '" + workItem.getCellSite() + "'");
					String smsBodies[] = new String[1];
					smsBodies[0] = (String)rOutput.get("SITENOTE");
					
					if (log.isInfoEnabled()) log.info("getCellSiteNote  called successfully for cellSiteId '" + workItem.getCellSite() + "'");
				
					if (Integer.parseInt((String)rOutput.get("ERRORMSG")) < 0 || smsBodies[0]== null)
					{
					    if (log.isDebugEnabled()) log.debug(">> No site notes available for cellSite " + workItem.getCellSite());
					    smsBodies = new String[1];
					    smsBodies[0] = "No site notes available for cellSite " + workItem.getCellSite();
					}
					else
					{
						if (log.isDebugEnabled()) log.debug(">> Sending " + smsBodies.length + " messages for cellSite " + workItem.getCellSite());
					}
					for (int i = 0; i < smsBodies.length; i++) {
						    if (log.isDebugEnabled()) log.debug("Sending message[" + i + "]: '" + smsBodies[i] +"'"); 
						    try
	                        {
						    	if(!workItem.getNetwork().equals("VOD"))
						    		brokerConnection.sendSimpleSMS(workItem.getMsisdn(), smsBodies[i],"CON");
							    else 
							    	SplitMsg(workItem.getMsisdn(),smsBodies[i]);
	                        }
	                        catch (BrokerException e)
	                        {
	                            log.error("Unable to send SMS; details:" , e );
	                        } 
					}			    
				}	
				else if (workItem.getCommand().toLowerCase().startsWith("copy")) 
				{
					if (log.isInfoEnabled()) log.info("alarm divert for cellSiteId '" + workItem.getCellSite() + "'");
					 		    
				}	
				else if (workItem.getCommand().toLowerCase().equals("out")) 
				{
					if (log.isInfoEnabled()) log.info("Engineer txting OUT for cellSiteId '" + workItem.getCellSite() + "'");
					 
				}
				else if (workItem.getCommand().toLowerCase().equals("callme")) 
				{
					if (log.isInfoEnabled()) log.info("Engineer requesting CALLME for cellSiteId '" + workItem.getCellSite() + "'");
					 
				}
				else if (workItem.getCommand().toLowerCase().equals("textin")) 
				{
					if (log.isInfoEnabled()) log.info("Engineer TEXTIN for cellSiteId '" + workItem.getCellSite() + "'");
					 
				}
				else 
				{
				    log.warn("Workitem has unsupported command: " + workItem.getCommand());
				}
				long currentTime = System.currentTimeMillis();
				
				elapsed= currentTime - startTime;

				log.info("[" + workItem.getMsisdn() + "] Request , " + workItem.getCommand() + " took " + dateFormat.format(new Date(elapsed)));
				
			}
			catch (InterruptedException ex) {
			    log.debug("Got an interrupted exception."); 
			    // We can ignore this; if we are interrupted because of a call to terminate() then
			    // terminate will be set to true, so the thread will run to a graceful completion.
			}
			catch(SQLException ex)
			{
				log.error("Problem querying db using jdbc: " ,ex);
			}
			
		}
		
        if (log.isDebugEnabled()) log.debug(this.getName() + " terminated. ");

    }
	
}
