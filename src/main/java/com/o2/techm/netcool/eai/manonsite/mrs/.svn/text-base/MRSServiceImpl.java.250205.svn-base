
package com.o2.manonsite.mrs;

import java.rmi.RemoteException;

import org.apache.log4j.Logger;


import com.o2.manonsite.WorkItem;
import com.o2.manonsite.WorkQueue;
import com.o2.manonsite.mrs.wsdl.MRSService;
import com.o2.manonsite.mrs.wsdl.Map;


public class MRSServiceImpl implements MRSService
{

	private static Logger log = Logger.getLogger(MRSServiceImpl.class);
    private WorkQueue workQueue;

    public MRSServiceImpl(WorkQueue workQueue)
    {
        this.workQueue = workQueue;
    }

    public Map getContent(Map request) throws RemoteException
    {
        log.info("Received call for getContent.");
        String incomingTextMessage = MRSMessageHelper.lookup(request, "msg"); 
        String replyTextMessage = null;
        
        try {
            MRSRequestInfo requestInfo = new MRSRequestInfo(incomingTextMessage);
            
            if (requestInfo.getCommand().toLowerCase().startsWith("alarm")) { 
	            if (log.isInfoEnabled()) log.info("Creating work item for cellSiteId " + requestInfo.getCellSiteId());
	
	            workQueue.enqueueWork( new WorkItem(
	                    MRSMessageHelper.lookup(request, "SHORTCODE"),
	                    MRSMessageHelper.lookup(request, "NETWORK"),
	                    MRSMessageHelper.lookup(request, "MSISDN"),
	                    requestInfo.getCellSiteId(),
	                    requestInfo.getPrefix(),
	                    requestInfo.getCommand())
	                    );
	            
	            replyTextMessage = "Processing your request for alarms for cellSite " + requestInfo.getCellSiteId(); 
            }
            else {
                replyTextMessage = "Unknown command '" + requestInfo.getCommand() + "'."; 
            }
        }
 		catch (MRSRequestInfoException ex) {
 		   log.warn("Incoming text message was formatted incorrectly."); 
 		   replyTextMessage = ex.getMessage();
 		}
 		catch (Exception ex) {
 		    ex.printStackTrace();
 		    log.fatal(ex.getMessage());
 		    replyTextMessage = "Exception while trying to process request!"; 
 		    System.exit(1);
 		}
 		catch (java.lang.Error e) {
 		    log.fatal(e.getMessage());
 		    replyTextMessage = "Exception while trying to process request!"; 
 		    System.exit(1); 		    
 		}
        
        if (log.isInfoEnabled()) log.info("Sending response '" + replyTextMessage + "'");
        
 		return MRSMessageHelper.createResponse(MRSMessageHelper.FLASH_MESSAGE,
                MRSMessageHelper.MTCODE, replyTextMessage);

    }  
    

        
}
