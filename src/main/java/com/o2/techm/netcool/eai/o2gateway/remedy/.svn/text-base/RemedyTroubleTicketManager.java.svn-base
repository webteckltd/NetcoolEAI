/* Modification  History :
* Date          Version  Modified by     Brief Description of Modification
* 				 1.0					 Base version
* 29-Oct-2010	 1.1	   KEANE		 Modified for DR 1434978                                                                                              
*/
package com.o2.osiris.remedy;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.ResourceBundle;
import java.util.Vector;

import org.apache.log4j.Logger;

import com.o2.osiris.Osiris;
import com.o2.osiris.netcool.BasicCICEventHandling;
import com.o2.osiris.troubleticket.TroubleTicket;
import com.o2.osiris.troubleticket.TroubleTicketException;
import com.o2.osiris.troubleticket.TroubleTicketManager;
import com.o2.osiris.util.WorkQueue;
import com.remedy.arsys.api.ARException;
import com.remedy.arsys.api.ARServerUser;
import com.remedy.arsys.api.Entry;
import com.remedy.arsys.api.EntryCriteria;
import com.remedy.arsys.api.EntryFactory;
import com.remedy.arsys.api.EntryID;
import com.remedy.arsys.api.EntryItem;
import com.remedy.arsys.api.EntryKey;
import com.remedy.arsys.api.FieldID;
import com.remedy.arsys.api.NameID;
import com.remedy.arsys.api.Timestamp;
import com.remedy.arsys.api.Value;

public class RemedyTroubleTicketManager implements TroubleTicketManager
{
    private static final String DEFAULT_UID = "65534";
    private static final FieldID ACTUAL_RESOLUTION_DATE_FIELD = new FieldID(Constants.ACTUAL_RESOLUTION_DATE);
    private static final FieldID RESOLUTION_DATE_FIELD = new FieldID(Constants.INDIVIDUAL_RESOLUTION_DATE);
    private static final FieldID RESOLUTION_INDIVIDUAL_FIELD = new FieldID(Constants.RESOLUTION_INDIVIDUAL);
    private static final FieldID RESOLUTION_GROUP_FIELD = new FieldID(Constants.RESOLUTION_GROUP);
    private static final FieldID RESOLUTION_ITEM_FIELD = new FieldID(Constants.RESOLUTION_ITEM);
    private static final FieldID RESOLUTION_CATEGORY_FIELD = new FieldID(Constants.RESOLUTION_CATEGORY);
    private static final FieldID RESOLUTION_CASE_TYPE_FIELD = new FieldID(Constants.RESOLUTION_CASE_TYPE);
    private static final String REMEDY_SERVICE_AFFECTING_NULL = "2";
    private static final String REMEDY_SERVICE_AFFECTING_NO = "1";
    private static final String REMEDY_SERVICE_AFFECTING_YES = "0";
    private static final FieldID CIC_MANUFACTURER_FIELD = new FieldID(Constants.CIC_MANUFACTURER);
    private static final FieldID CIC_SERVICE_GROUP_FIELD = new FieldID(Constants.CIC_SERVICE_GROUP);
    private static final FieldID CIC_TIME_TO_FIX_UNITS_FIELD = new FieldID(Constants.CIC_TIME_TO_FIX_UNITS);
    private static final FieldID CIC_SERVER_SERIAL_FIELD = new FieldID(Constants.CIC_SERVER_SERIAL);
    private static final FieldID CIC_OWNER_UID_FIELD = new FieldID(Constants.CIC_OWNER_UID);
    private static final FieldID CIC_POLL_FIELD = new FieldID(Constants.CIC_POLL);
    private static final FieldID CIC_SEVERITY_FIELD = new FieldID(Constants.CIC_SEVERITY);
    private static final FieldID CIC_ALARM_IMPACT_FIELD = new FieldID(Constants.CIC_ALARM_IMPACT);
    private static final FieldID CIC_COMMTMENT_POINTS_FIELD = new FieldID(Constants.CIC_COMMITMENT_POINTS);
    private static final FieldID CIC_COMMITMENT_TOTAL_FIELD = new FieldID(Constants.CIC_COMMITMENT_TOTAL);
    private static final FieldID CIC_TT_FLAG_FIELD = new FieldID(Constants.CIC_TT_FLAG);
    private static final FieldID CIC_OUTAGE_TYPE_FIELD = new FieldID(Constants.CIC_OUTAGE_TYPE);
    private static final FieldID CIC_NOTIFICATION_FLAG_FIELD = new FieldID(Constants.CIC_NOTIFICATION_FLAG);
    private static final FieldID CIC_OBJECT_TYPE_FIELD = new FieldID(Constants.CIC_OBJECT_TYPE);
    private static final FieldID FIRST_OCCURRENCE_FIELD = new FieldID(Constants.FIRST_OCCURENCE);
    private static final FieldID STATE_CHANGE_FIELD = new FieldID(Constants.STATE_CHANGE);
    private static final FieldID CIC_FAULT_PRIORITY_FIELD = new FieldID(Constants.CIC_FAULT_PRIORITY);
    private static final FieldID CIC_FAULT_IMPACT_FIELD = new FieldID(Constants.CIC_FAULT_IMPACT);
    private static final FieldID CIC_FAULT_STATUS_FIELD = new FieldID(Constants.CIC_FAULT_STATUS);
    private static final FieldID CIC_OUTAGE_START_FIELD = new FieldID(Constants.CIC_OUTAGE_START);
    private static final FieldID CIC_OUTAGE_END_FIELD = new FieldID(Constants.CIC_OUTAGE_END);
    private static final FieldID CIC_OUTAGE_DURATION_FIELD = new FieldID(Constants.CIC_OUTAGE_DURATION);
    private static final FieldID CIC_TT_FIELD4_FIELD = new FieldID(Constants.CIC_TT_FIELD4);
    private static final FieldID CIC_TT_FIELD1_FIELD = new FieldID(Constants.CIC_TT_FIELD1);
    private static final FieldID CIC_TT_FIELD2_FIELD = new FieldID(Constants.CIC_TT_FIELD2);
    private static final FieldID CIC_TT_FIELD3_FIELD = new FieldID(Constants.CIC_TT_FIELD3);
    private static final FieldID CIC_TT_DESCRIPTION_FIELD = new FieldID(Constants.CIC_TT_DESCRIPTION);
    private static final FieldID CIC_IDENTIFIER_FIELD = new FieldID(Constants.CIC_IDENTIFIER);
    private static final FieldID CIC_TT_ELEMENT_ID_FIELD = new FieldID(Constants.CIC_TT_ELEMENT_ID);
    private static final FieldID CIC_TT_NOTE_FIELD = new FieldID(Constants.CIC_TT_NOTE);
    private static final FieldID CIC_TROUBLE_TICKET_FIELD = new FieldID(Constants.CIC_TROUBLE_TICKET);
    private static final FieldID CIC_TIME_TO_FIX_FIELD = new FieldID(Constants.CIC_TIME_TO_FIX);
    private static final FieldID CIC_CDS_TYPE_FIELD = new FieldID(Constants.CIC_CDS_TYPE);
    private static final FieldID CIC_CDS_ID_FIELD = new FieldID(Constants.CIC_CDS_ID);
    private static final FieldID CIC_SERVER_NAME_FIELD = new FieldID(Constants.CIC_SERVER_NAME);
    private static final FieldID CIC_NE_NAME_FIELD = new FieldID(Constants.CIC_NE_NAME);
    private static final FieldID CURRENT_IMPACT_FIELD = new FieldID(Constants.CURRENT_IMPACT);
    private static final FieldID STATUS_FIELD = new FieldID(Constants.STATUS);
    private static final FieldID ADDITIONAL_INFO_FIELD = new FieldID(Constants.ADDITIONAL_INFO);
    private static final FieldID ADDITIONAL_TEXT_FIELD = new FieldID(Constants.ADDITIONAL_TEXT);
    private static final FieldID SPECIFIC_PROBLEMS_FIELD = new FieldID(Constants.SPECIFIC_PROBLEMS);
    private static final FieldID PROBABLE_CAUSE_FIELD = new FieldID(Constants.PROBABLE_CAUSE);
    private static final FieldID SOURCE_CLASS_FIELD = new FieldID(Constants.SOURCE_CLASS);
    private static final FieldID SERVICE_AFFECTING_FIELD = new FieldID(Constants.SERVICE_AFFECTING);
    private static final FieldID CIC_ALERT_KEY_FIELD = new FieldID(Constants.CIC_ALERT_KEY);
    private static final FieldID SEVERITY_FIELD = new FieldID(Constants.SEVERITY);
    private static final FieldID EVENT_TIME_FIELD = new FieldID(Constants.EVENT_TIME);
    private static final FieldID CIC_COUNT_FIELD = new FieldID(Constants.CIC_COUNT);
    private static final FieldID CIC_MANAGER_FIELD = new FieldID(Constants.CIC_MANAGER);
    private static final FieldID REQUESTER_NAME_FIELD = new FieldID(Constants.REQUESTER_NAME);
    private static final FieldID INC_PROB_FIELD = new FieldID(Constants.INC_PROB);
    private static final FieldID TICKET_TYPE_FIELD = new FieldID(Constants.TICKET_TYPE);
    private static final FieldID ITEM_FIELD = new FieldID(Constants.ITEM);
    private static final FieldID PRIORITY_FIELD = new FieldID(Constants.PRIORITY);
    private static final FieldID SITE_NAME_FIELD = new FieldID(Constants.SITE_NAME);
    private static final FieldID GROUP_FIELD = new FieldID(Constants.GROUP);
    private static final FieldID SOURCE_FIELD = new FieldID(Constants.SOURCE);
    private static final FieldID PROBLEM_DETAILS_FIELD = new FieldID(Constants.PROBLEM_DETAILS);
    private static final FieldID CATEGORY_FIELD = new FieldID(Constants.CATEGORY);
    private static final FieldID CASE_TYPE_FIELD = new FieldID(Constants.CASE_TYPE);
    private static final FieldID PROBLEM_SUMMARY_FIELD = new FieldID(Constants.PROBLEM_SUMMARY);
    private static final FieldID SUBMITTER_FIELD = new FieldID(Constants.SUBMITTER);
    private static final FieldID MONITOR_UNTIL_DATE_FIELD = new FieldID(Constants.MONITOR_UNTIL_DATE); 
    private static final FieldID WORK_LOG_TEMPORARY_FIELD = new FieldID(Constants.WORK_LOG_TEMPORARY_FIELD);
    
    private static final String USERNAME_UID_BUNDLE_NAME = "UsernameUID"; 

	private static final String GIS_USERID = "GIS";
    private static final String CIC = "CIC";
    private static final String DECIMAL_FORMAT = "000000000000";
	private static final SimpleDateFormat REMEDY_DATE_FORMAT = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

	
	private static Logger log = Logger.getLogger(RemedyTroubleTicketManager.class);
	
	// private ARServerUser context;
	private NameID schemaNameID;

	private String username; 
	private ARServerUser userInfo;
	
	private Hashtable uidToUsernameMapping; 
	private Hashtable usernameToUidMapping; 
	
	private WorkQueue newTTList = new WorkQueue();
	private WorkQueue upTTList = new WorkQueue();
	
	public WorkQueue getCreateLinkList()
	{
		log.warn(newTTList.size() + " events in List");
		return newTTList;
	}
	
	public WorkQueue getUpdateLinkList()
	{
		log.warn(upTTList.size() + " events in List");
		return upTTList;
	}
	public RemedyTroubleTicketManager(String login, String password, String server, String language)
            throws TroubleTicketException
    {
	    createUsernameUIDMaps(); 

	    this.username = login;
	    userInfo = new ARServerUser(username, password, language, server);

   	    schemaNameID = new NameID(Constants.TT_SCHEMA); 
   	    log.debug("Remedy Initialised Correctly :)");	    
    }	
	
	public RemedyTroubleTicketManager()
		throws TroubleTicketException
	{
	}
	
	private void createUsernameUIDMaps()
	{
		ResourceBundle resourceBundle 
		= ResourceBundle.getBundle(USERNAME_UID_BUNDLE_NAME);

		uidToUsernameMapping = new Hashtable();
	    usernameToUidMapping = new Hashtable(); 
	
		Enumeration resourceKeys = resourceBundle.getKeys();
		while (resourceKeys.hasMoreElements()) {
		    String username = (String) resourceKeys.nextElement();
		    String uid = resourceBundle.getString(username);
		    
		    usernameToUidMapping.put(username, uid); 
		    uidToUsernameMapping.put(uid, username); 
		}		
	}
	
	private String uidToUsername(String uid) {
	    String username = (String) uidToUsernameMapping.get(uid);
	    
	    if (username == null) {
	        username = "Unknown CIC user, UID " + uid; 
	        log.warn("UID " + uid + " is not present in the UsernameUID properties file. Will use '" 
	                + username + "' for now.");	  
	    }
	    
	    return username; 
	}
	
	public void initPlannedOutages() throws TroubleTicketException
	{
	    throw new TroubleTicketException("Planned outages not implemented for the Remedy plugin.");
	}
	
	public void shutdown() 
	{    
	}

	public 
	void 
	createTroubleTicket(
		TroubleTicket troubleTicket
	) throws TroubleTicketException
	{
        EntryFactory entryFactory = EntryFactory.getFactory();
        Entry entry = (Entry) entryFactory.newInstance();

        entry.setSchemaID(schemaNameID);
        entry.setContext(userInfo);
        
        Vector entryItems = new Vector(); 
        
        entryItems.add(new EntryItem(SUBMITTER_FIELD, new Value(uidToUsername(troubleTicket.getOwnerUID())))); 
        entryItems.add(new EntryItem(PROBLEM_SUMMARY_FIELD, new Value(troubleTicket.getSummary())));
        entryItems.add(new EntryItem(CASE_TYPE_FIELD, new Value(CIC))); // Always set this to a constant value.
        entryItems.add(new EntryItem(CATEGORY_FIELD, new Value(CIC))); // Always set this to a constant value.
        entryItems.add(new EntryItem(PROBLEM_DETAILS_FIELD, new Value(determineProblemDetails(troubleTicket))));
        entryItems.add(new EntryItem(SOURCE_FIELD, new Value(determineSource(troubleTicket)))); 
        entryItems.add(new EntryItem(GROUP_FIELD, new Value(determineGroup(troubleTicket)))); 
        entryItems.add(new EntryItem(SITE_NAME_FIELD, new Value(troubleTicket.getTTField3())));

        // Priority (Required) value : 1 - 7
        troubleTicket.setFaultPriority(determinePriority(troubleTicket));
        entryItems.add(new EntryItem(PRIORITY_FIELD, new Value(troubleTicket.getFaultPriority())));
        entryItems.add(new EntryItem(ITEM_FIELD, new Value(CIC)));
        entryItems.add(new EntryItem(TICKET_TYPE_FIELD, new Value(0)));
        entryItems.add(new EntryItem(INC_PROB_FIELD, new Value(0)));
        entryItems.add(new EntryItem(REQUESTER_NAME_FIELD, new Value(uidToUsername(troubleTicket.getOwnerUID()))));
        entryItems.add(new EntryItem(CIC_MANAGER_FIELD, new Value(troubleTicket.getManager())));
        entryItems.add(new EntryItem(CIC_COUNT_FIELD, new Value(troubleTicket.getTally())));
        entryItems.add(new EntryItem(EVENT_TIME_FIELD, new Value(troubleTicket.getFirstOccurrence())));
        entryItems.add(new EntryItem(SEVERITY_FIELD, new Value(troubleTicket.getSeverity())));
        entryItems.add(new EntryItem(CIC_ALERT_KEY_FIELD, new Value(troubleTicket.getAlertKey())));
        entryItems.add(new EntryItem(SERVICE_AFFECTING_FIELD, new Value(determineServiceAffecting(troubleTicket)))); 
        entryItems.add(new EntryItem(SOURCE_CLASS_FIELD, new Value(troubleTicket.getServiceGroup())));
        entryItems.add(new EntryItem(PROBABLE_CAUSE_FIELD, new Value(troubleTicket.getOutageType())));
        entryItems.add(new EntryItem(SPECIFIC_PROBLEMS_FIELD, new Value(troubleTicket.getTTField4())));
        entryItems.add(new EntryItem(ADDITIONAL_TEXT_FIELD, new Value(troubleTicket.getTTNote())));
        entryItems.add(new EntryItem(ADDITIONAL_INFO_FIELD, new Value(troubleTicket.getAlarmImpact())));

		// check to see if it is a close message as well 
	  	if (troubleTicket.getTTFlag().equals(BasicCICEventHandling.TTFLAG_RAISE_AND_CLOSE)) {
	  	    entryItems.add(new EntryItem(STATUS_FIELD, new Value("Closed")));
		}
	  	
	  	entryItems.add(new EntryItem(CURRENT_IMPACT_FIELD, new Value(determineCurrentImpact(troubleTicket)))); 	  	
	  	entryItems.add(new EntryItem(CIC_NE_NAME_FIELD, new Value(troubleTicket.getNEName())));
	  	entryItems.add(new EntryItem(CIC_SERVER_NAME_FIELD, new Value(troubleTicket.getServerName())));
	  	entryItems.add(new EntryItem(CIC_CDS_ID_FIELD, new Value(troubleTicket.getCDS_ID())));
	  	entryItems.add(new EntryItem(CIC_CDS_TYPE_FIELD, new Value(troubleTicket.getCDS_Type())));
	  	entryItems.add(new EntryItem(CIC_TIME_TO_FIX_FIELD, new Value(troubleTicket.getTimeToFix())));
	  	entryItems.add(new EntryItem(CIC_TROUBLE_TICKET_FIELD, new Value(troubleTicket.getTroubleTicket())));
	  	entryItems.add(new EntryItem(CIC_TT_NOTE_FIELD, new Value(troubleTicket.getTTNote())));
	  	entryItems.add(new EntryItem(CIC_TT_ELEMENT_ID_FIELD, new Value(troubleTicket.getTTElementID())));
	  	entryItems.add(new EntryItem(CIC_IDENTIFIER_FIELD, new Value(troubleTicket.getIdentifier())));
	  	entryItems.add(new EntryItem(CIC_TT_DESCRIPTION_FIELD, new Value(troubleTicket.getTTDescription())));
	  	entryItems.add(new EntryItem(CIC_TT_FIELD3_FIELD, new Value(troubleTicket.getTTField3()))); 
	  	entryItems.add(new EntryItem(CIC_TT_FIELD2_FIELD, new Value(troubleTicket.getTTField2()))); 
	  	entryItems.add(new EntryItem(CIC_TT_FIELD1_FIELD, new Value(troubleTicket.getTTField1()))); 
	  	entryItems.add(new EntryItem(CIC_TT_FIELD4_FIELD, new Value(troubleTicket.getTTField4()))); 
	  	entryItems.add(new EntryItem(CIC_OUTAGE_DURATION_FIELD, new Value(troubleTicket.getOutageDuration())));
	  	entryItems.add(new EntryItem(CIC_OUTAGE_END_FIELD, new Value(troubleTicket.getOutageEnd())));
	  	entryItems.add(new EntryItem(CIC_OUTAGE_START_FIELD, new Value(troubleTicket.getOutageStart())));
	  	entryItems.add(new EntryItem(CIC_FAULT_STATUS_FIELD, new Value(troubleTicket.getFaultStatus())));
	  	
	  	entryItems.add(new EntryItem(CIC_FAULT_IMPACT_FIELD, 
	  	        new Value(uidToUsername(troubleTicket.getOwnerUID()).equals(GIS_USERID) ? "Yes" : troubleTicket.getFaultImpact()))); 	  	
		
	  	log.debug("The fault priority is '" + troubleTicket.getFaultPriority()); 
	  	entryItems.add(new EntryItem(CIC_FAULT_PRIORITY_FIELD, new Value(determineFaultPriority(troubleTicket)))); 
	  	entryItems.add(new EntryItem(STATE_CHANGE_FIELD, new Value(troubleTicket.getStateChange())));
	  	entryItems.add(new EntryItem(FIRST_OCCURRENCE_FIELD, new Value(troubleTicket.getFirstOccurrence())));
	  	entryItems.add(new EntryItem(CIC_OBJECT_TYPE_FIELD, new Value(troubleTicket.getObjectType())));
	  	entryItems.add(new EntryItem(CIC_NOTIFICATION_FLAG_FIELD, new Value(troubleTicket.getNotificationFlag())));
	  	entryItems.add(new EntryItem(CIC_OUTAGE_TYPE_FIELD, new Value(troubleTicket.getOutageType())));
	  	entryItems.add(new EntryItem(CIC_TT_FLAG_FIELD, new Value(troubleTicket.getTTFlag())));
	  	entryItems.add(new EntryItem(CIC_COMMITMENT_TOTAL_FIELD, new Value(troubleTicket.getCommitmentTotal())));
	  	entryItems.add(new EntryItem(CIC_COMMTMENT_POINTS_FIELD, new Value(troubleTicket.getCommitmentPoints())));
	  	entryItems.add(new EntryItem(CIC_ALARM_IMPACT_FIELD, new Value(troubleTicket.getAlarmImpact())));
	  	entryItems.add(new EntryItem(CIC_SEVERITY_FIELD, new Value(troubleTicket.getSeverity())));
	  	entryItems.add(new EntryItem(CIC_POLL_FIELD, new Value(troubleTicket.getPoll())));
	  	entryItems.add(new EntryItem(CIC_OWNER_UID_FIELD, new Value(troubleTicket.getOwnerUID())));
	  	entryItems.add(new EntryItem(CIC_SERVER_SERIAL_FIELD, new Value(troubleTicket.getServerSerial())));
	  	entryItems.add(new EntryItem(CIC_TIME_TO_FIX_UNITS_FIELD, new Value(troubleTicket.getTimeToFixUnits())));
	  	entryItems.add(new EntryItem(CIC_SERVICE_GROUP_FIELD, new Value(troubleTicket.getServiceGroup())));
	  	entryItems.add(new EntryItem(CIC_MANUFACTURER_FIELD, new Value(troubleTicket.getManufacturer())));
	  		  	
        entry.setEntryItems(vectorToEntryItemArray(entryItems));
        
        try
        {
            log.debug("Creating entry...");
            entry.create();
            log.info("Entry (key = " + entry.getKey().getEntryID() + ") is successfully created");
            
            // save the trouble ticket number 
            troubleTicket.setTroubleTicket(entry.getKey().getEntryID().toString());

        } catch (ARException e) {
            log.error(entry, e);
            throw new TroubleTicketException(e.getMessage()); 
        }

        entryFactory.releaseInstance(entry);
	}
	
	private String determineFaultPriority(TroubleTicket troubleTicket)
	{
	    return uidToUsername(troubleTicket.getOwnerUID()).equals(GIS_USERID) ? "6" : ensureStringValue(troubleTicket.getFaultPriority(), ""); 
	}

	/**
     * @param troubleTicket
     * @return
     */
    private String determineCurrentImpact(TroubleTicket troubleTicket)
    {
        String currentImpact = troubleTicket.getTTField2();
        if (currentImpact == null || currentImpact.equals(""))
        {
            currentImpact = "No impact.";
        }
        return currentImpact;
    }

    /**
     * @param troubleTicket
     * @return
     */
    private String determineGroup(TroubleTicket troubleTicket)
    {
        return uidToUsername(troubleTicket.getOwnerUID()).equals(GIS_USERID) ? GIS_USERID : "SMC";
    }

    /**
     * @param troubleTicket
     * @return
     */
    private String determineSource(TroubleTicket troubleTicket)
    {
        return uidToUsername(troubleTicket.getOwnerUID()).equals(GIS_USERID) ?  "FM Interface" : "SMC";
    }

    /**
     * @param troubleTicket
     * @return
     */
    private String determineProblemDetails(TroubleTicket troubleTicket)
    {
        return "CDS_ID = " + troubleTicket.getCDS_ID()
            	+ ", Severity = " + troubleTicket.getSeverity()
            	+ ", FirstOccurrence = " + troubleTicket.getFirstOccurrence()
            	+ ", TTDescription = " + troubleTicket.getTTDescription();
    }

    /**
     * @param troubleTicket
     */
    private String determinePriority(TroubleTicket troubleTicket)
    {
        if (uidToUsername(troubleTicket.getOwnerUID()).equals(GIS_USERID))
        {
            // If the OwnerUID is "GIS", then the fault priority must be set to
            // 6.
            // 
            return "6";
        } 
        else if (troubleTicket.getFaultPriority().equals("default"))
        {
            log.debug("Changing Priority from 'default' to '1'");
            return REMEDY_SERVICE_AFFECTING_NO; // TODO check this!
        } 
        else    
        {
            return troubleTicket.getFaultPriority();
        }
    }
    
    // Start of Change for OSC 1434978
    // Changed the return variable as boolean 
    public boolean updateTroubleTicket(TroubleTicket troubleTicket)
			throws TroubleTicketException {
    //End of Change for OSC 1434978    
        
		String caseId = troubleTicket.getTroubleTicket(); 
    	String alertId = troubleTicket.getServerSerial();
    	String eventIdentifier = troubleTicket.getIdentifier();         
		String severity = troubleTicket.getSeverity(); 
		String ttFlag = troubleTicket.getTTFlag();
		String ttNote = troubleTicket.getTTNote(); 
		String description = troubleTicket.getTTDescription(); 

        Vector entryItems = new java.util.Vector(); 
        NumberFormat formatter = new DecimalFormat(DECIMAL_FORMAT);
        Entry entry = null;
        

	    log.debug("caseId: " + caseId);
        log.debug("alertId: " + alertId);
        log.debug("eventIdentifier: " + eventIdentifier);
        log.debug("severity: " + severity);
        log.debug("ttFlag: " + ttFlag);
        log.debug("journal: " + ttNote);
        log.debug("description: " + description);
        
        if (caseId.equals("")) // not sure if excepton should be thrown?
            throw new TroubleTicketException("No TroubleTicket number has been specified");

        EntryID entryID = new EntryID(caseId);
        EntryKey entryKey = new EntryKey(schemaNameID, entryID);
        EntryCriteria entryCriteria = new EntryCriteria();

        try
        {
            entry = EntryFactory.findByKey(userInfo, entryKey, entryCriteria);

            entryItems.add(new EntryItem(SEVERITY_FIELD, new Value(severity))); 
            entryItems.add(new EntryItem(ADDITIONAL_TEXT_FIELD, new Value(ttNote)));
            entryItems.add(new EntryItem(WORK_LOG_TEMPORARY_FIELD, new Value(ttNote)));
            entryItems.add(new EntryItem(PROBLEM_DETAILS_FIELD, new Value(description)));

            // check to see if clear clear message
            if (ttFlag.equals(BasicCICEventHandling.TTFLAG_NETWORK_CLEAR)
                    || ttFlag.equals(BasicCICEventHandling.TTFLAG_MANUAL_CLEAR))
            {
                log.info("Setting Status field to 'Resolved'.");                 
                entryItems.add(new EntryItem(STATUS_FIELD, new Value("Resolved")));
                entryItems.add(new EntryItem(RESOLUTION_CASE_TYPE_FIELD, new Value("Resolved")));
                entryItems.add(new EntryItem(RESOLUTION_CATEGORY_FIELD, new Value("Manual")));
                entryItems.add(new EntryItem(RESOLUTION_ITEM_FIELD, new Value("Resolution")));
                entryItems.add(new EntryItem(RESOLUTION_GROUP_FIELD, new Value("SMC")));
                
                String username = ""; 
                if (ttFlag.equals(BasicCICEventHandling.TTFLAG_NETWORK_CLEAR)) {
                    username = "Network";
                }
                else {
                    username = uidToUsername(troubleTicket.getOwnerUID());
                }
                
                entryItems.add(new EntryItem(RESOLUTION_INDIVIDUAL_FIELD, new Value(username)));
                Date actualDate = new Date(); 
                entryItems.add(new EntryItem(ACTUAL_RESOLUTION_DATE_FIELD, new Value(new Timestamp(actualDate))));
                entryItems.add(new EntryItem(new FieldID(Constants.SOLUTION_SUMMARY), new Value("Resolved by " + username)));                
                entryItems.add(new EntryItem(new FieldID(Constants.SOLUTION_DETAILS), new Value("Resolved by " + username)));
                
                // The Monitor Until Date should be three days after the current time.  
                long threeDays = 3 * 24 * 60 * 60 * 1000;  
                Date monitorUntilDate = new Date();
                monitorUntilDate.setTime(monitorUntilDate.getTime() + threeDays);                
                entryItems.add(new EntryItem(MONITOR_UNTIL_DATE_FIELD, new Value(new Timestamp(monitorUntilDate))));
            }
            
            entry.setEntryItems(vectorToEntryItemArray(entryItems));            
            entry.store();

            log.info("Entry (key = " + entry.getKey().getEntryID() + ") is successfully updated");
            
        } catch (ARException e)
        {
            log.error(entry, e);
            throw new TroubleTicketException(e.getMessage());         
        }
    // Start of Change for OSC 1434978
		return false; 
    // End of Change for OSC 1434978
    }
    

	private static EntryItem[] vectorToEntryItemArray(Vector v)
	{
	    EntryItem[] ret = new EntryItem[v.size()];
	    
	    for (int i = 0; i < v.size(); i++) {
	        ret[i] = (EntryItem) v.elementAt(i); 
	    }
	    return ret; 
	}
	
	private static String ensureStringValue(String s, String valueIfNull)
	{
	    return s == null ? valueIfNull : s; 
	}
	
	private String determineServiceAffecting(TroubleTicket troubleTicket) 
	{
	    String username = uidToUsername(troubleTicket.getOwnerUID()); 	    
	    String serviceAffecting = username.equals(GIS_USERID) ? "Yes" : troubleTicket.getFaultImpact() ; 
	    String ret; 
	    
	    if (serviceAffecting.equals("Yes")) {
	        ret = REMEDY_SERVICE_AFFECTING_YES; 
	    } 
	    else if (serviceAffecting.equals("No")){
	        ret =  REMEDY_SERVICE_AFFECTING_NO;
	    }
	    else {
	        ret =  REMEDY_SERVICE_AFFECTING_NULL; 
	    }
	    
	    return ret; 
	}

	//Added for DR-1616094
	public boolean updateTroubleTicketTitle(TroubleTicket troubleTicket) throws TroubleTicketException {
		// TODO Auto-generated method stub
		return false;
	}
	//End of Addition for DR-1616094
}
