package com.o2.manonsite.inms;

import java.net.URL;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;

import org.apache.log4j.Logger;

//import sun.net.www.protocol.https.HttpsURLConnectionImpl;

import com.o2.common.Configuration;

/**
 * @author Adetola Ademiju
 * 
 * A class to wrap pure HTTPS request\replies to the INMS smsc_mos application
 * 
 */
public class INMSConnection
{
	private HttpsURLConnection httpConnection=null;
	private String keyfile;
	private String password;
	private static final String ENDPOINT = Configuration.getValue(Configuration.INMS_URL);
	private static final String FUNCTIONCALL = "?&function=alarm&siteRef="; 
	private static final String HEADER_PREFIX = "SMSHeader:";
	private static final String FOOTER = "## End."; 
	public static final String INMSFAILED="INMSWEB FAILURE";
	
	private static Logger log = Logger.getLogger(INMSConnection.class);
	
	public INMSConnection() 
	{
		try
		{
			password = Configuration.getValue(Configuration.INMS_PASSWORD );
			keyfile = Configuration.getValue(Configuration.INMS_CERTIFICATE );
						
//			OSC 349
			log.info("BEFORE ENDPOINT [" + ENDPOINT + "]  ");
					
			httpConnection = (HttpsURLConnection)new URL(ENDPOINT).openConnection();
//			OSC 349
			log.info("AFTER ENDPOINT");
			
			SSLSocketFactory factory = null;
			SSLContext ctx;
			
			ctx = SSLContext.getInstance("SSL");
			
			//	 new line
			java.security.Security.addProvider(
					new com.sun.net.ssl.internal.ssl.Provider());			
			KeyManagerFactory kmf;
			KeyStore ks;			
			kmf = KeyManagerFactory.getInstance("SunX509");
			ks = KeyStore.getInstance("PKCS12");
			ks.load(new FileInputStream(keyfile),password.toCharArray());
			kmf.init(ks,password.toCharArray());
			ctx.init(kmf.getKeyManagers(),null,null);
			factory = ctx.getSocketFactory();	
			
			if (log.isInfoEnabled()) log.info("Loaded digital cert");
			//httpConnection.setDoOutput(true);
			httpConnection.setDoOutput(true);
			httpConnection.setDoInput(true);
			String usrAgt = "Java/" + System.getProperty("java.runtime.version") + " (ManOnSite Processor)";
			//log.debug("User Agent : " + usrAgt);
			httpConnection.setRequestProperty("User-Agent",usrAgt);			
			httpConnection.setSSLSocketFactory(ctx.getSocketFactory());
			httpConnection.setRequestProperty("Content-type", "application/x-www-form-urlencoded");
			
			
		}
		catch (IOException e)
		{
			// TODO add a connection retry value
			log.debug("IOException caught: " ,e);
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			log.debug("NoSuchAlgorithmException caught: " ,e);
		} catch (KeyStoreException e) {
			// TODO Auto-generated catch block
			log.debug("KeyStoreException caught: " ,e);
		} catch (CertificateException e) {
			// TODO Auto-generated catch block
			log.debug("CertificateException caught: " ,e);
		} catch (UnrecoverableKeyException e) {
			// TODO Auto-generated catch block
			log.debug("UnrecoverableKeyException caught: " ,e);
		} catch (KeyManagementException e) {
			// TODO Auto-generated catch block
			log.debug("KeyManagementException caught: " ,e);
		}
	}
	protected void sendRequest(String funtnUrl) throws IOException
	{
		try
		{
			OutputStream os = httpConnection.getOutputStream();
			os.write((funtnUrl).getBytes());
		}
		catch (IOException e)
		{
			// TODO add a write retry value
			log.debug("IOException caught: " ,e);
			throw new IOException(e.getMessage());
		}
		
	}

	protected String[] convertReplyToSmsList() throws IOException
	{		
		String[] result = null;
		int numSms = 0; 
		String smsStrings = "";
		
		try {
			BufferedReader reader =
				new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));			
			String line;
			
			if ((line = reader.readLine()) != null) {
				if (!line.startsWith(HEADER_PREFIX)) {
					// TODO throw an exception; the header is wrong!
					log.debug("headerPrefix WRONG!");
					log.debug("Recieved " +  line + "when it should be " + HEADER_PREFIX );
				}
			}
			
			// Count all the SMS messages into a FRESPONSE buffer
			while (((line = reader.readLine()) != null) && (!line.startsWith(FOOTER))
					&& (line.toUpperCase().startsWith("SMSBODY")|| line.toUpperCase().startsWith("NCOBODY") || line.toUpperCase().startsWith("STATUS")))
			{		
				log.debug("Recieved " +  line);
				numSms++;
				//int positionOfTab = line.indexOf("\t");
				//smsStrings += line.substring(positionOfTab + 1, line.length());
				smsStrings += line;
				smsStrings += "\n";
			}		
		} catch (Exception ex) {
			log.debug("Exception caught: " ,ex);
			throw new IOException(ex.getMessage());
		}
		
		if (numSms > 0)
		{
			result = new String[numSms];
			// Now use the FRESPONSE buffer to populate the SmsList object
			result = smsStrings.split("\\n");			
		}
		return result;
	}
	
	public String[] getCellSiteAlarms(String cellSite) throws IOException
	{
		//log.debug("URLSTRING: " + FUNCTIONCALL+cellSite);
		sendRequest(FUNCTIONCALL+cellSite);
		log.info("URLString[" + FUNCTIONCALL+cellSite + "]  ");
		String[] result = convertReplyToSmsList();
		return result;
	}
	/*
	 * https://thomas.cellnet.co.uk:8080/ManOnSite3b/?function=alarms&siteRef=000029G
	 * https://thomas.cellnet.co.uk:8080/ManOnSite3b/?function=info&siteRef=SL1
	 * https://thomas.cellnet.co.uk:8080/ManOnSite3b/?function=unlock&siteRef=29&BCF=5&TRX=1
	 */
	//With Java 1.5, i could have used var args here instead of 2 methods
	public String[] getRequest(String srcFunc ,String cellSite) throws IOException
	{
		//Old way
		//String funcName = new StringBuffer("?&sourceFunction=").append(srcFunc).append("&sourceText=").toString();
		//MOS 3B way
		String funcName = new StringBuffer("?&function=").append(srcFunc).append("&siteRef=").append(cellSite).toString();
		//System.out.println(funcName);
		//log.debug("URLSTRING: " + funcName);
		log.info("UrlString[" + funcName + "]  ");
		sendRequest(funcName);
		String[] result = convertReplyToSmsList();
		return result;
	}
	public String[] getRequest(String srcFunc ,String cellSite, String extras) throws IOException
	{		
		String funcName = new StringBuffer("?&function=").append(srcFunc).append("&siteRef=").append(cellSite).append(extras).toString();
		//log.debug("URLSTRING: " + funcName);
		//System.out.println(funcName);
		log.info("Urlstring[" + funcName + "]  ");
		sendRequest(funcName);
		String[] result = convertReplyToSmsList();
		return result;
	}
}
